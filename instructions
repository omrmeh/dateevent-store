# Structure du dépôt

```
.
├── datetime_event_store.py
├── tests
│   └── test_datetime_event_store.py
└── .github
    └── workflows
        └── python-app.yml
```

---

##Fichier datetime_event_store

from datetime import datetime
from typing import Any, List, Tuple

class DateTimeEventStore:
    """
    Stocke des événements associés à un datetime.datetime
    et permet de récupérer ceux situés dans un intervalle donné.
    """

    def __init__(self) -> None:
        # Liste non triée de tuples (datetime, event)
        self._events: List[Tuple[datetime, Any]] = []

    def store_event(self, at: datetime, event: Any) -> None:
        """
        Stocke simplement l'événement dans la liste.
        """
        self._events.append((at, event))

    def get_events(self, start: datetime, end: datetime) -> List[Any]:
        """
        Trie tous les événements par date, puis renvoie ceux dont la date
        est entre `start` et `end` inclus.
        """
        # on trie par date puis on garde ceux dans l'intervalle
        sorted_events = sorted(self._events, key=lambda x: x[0])
        return [evt for (dt, evt) in sorted_events if start <= dt <= end]


# Exemple d’utilisation
if __name__ == "__main__":
    store = DateTimeEventStore()
    t1 = datetime(2025, 5, 23, 10, 0)
    t2 = datetime(2025, 5, 23, 12, 30)
    t3 = datetime(2025, 5, 24, 9, 15)

    store.store_event(t2, "Déjeuner")
    store.store_event(t1, "Réunion matinale")
    store.store_event(t3, "Petit-déj équipe")

    res = store.get_events(
        datetime(2025, 5, 23, 9, 0),
        datetime(2025, 5, 23, 23, 59)
    )
    print(res)  # ['Réunion matinale', 'Déjeuner']



## Fichier `tests/test_datetime_event_store.py`

```python
import pytest
from datetime import datetime
from datetime_event_store import DateTimeEventStore


def test_store_and_get_events_empty():
    store = DateTimeEventStore()
    assert store.get_events(datetime(2025,1,1), datetime(2025,12,31)) == []


def test_event_within_range():
    store = DateTimeEventStore()
    t = datetime(2025,6,15,14,0)
    store.store_event(t, "Event")
    assert store.get_events(datetime(2025,6,15), datetime(2025,6,15,23,59)) == ["Event"]


def test_event_outside_range():
    store = DateTimeEventStore()
    t = datetime(2025,6,15,14,0)
    store.store_event(t, "Event")
    assert store.get_events(datetime(2025,6,16), datetime(2025,6,16,23,59)) == []


def test_multiple_events_order():
    store = DateTimeEventStore()
    t1 = datetime(2025,1,1,10,0)
    t2 = datetime(2025,1,1,9,0)
    store.store_event(t1, "Second")
    store.store_event(t2, "First")
    assert store.get_events(datetime(2025,1,1), datetime(2025,1,1,23,59)) == ["First", "Second"]
```

---

## Fichier `.github/workflows/python-app.yml`

```yaml
name: Python package CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: pip install pytest
    - name: Run tests
      run: pytest --maxfail=1 --disable-warnings -q
```
